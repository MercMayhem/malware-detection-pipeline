from malwareDetection import logger
from malwareDetection.entity.entities import DataValidationEntity
import os
import pandas as pd
import yaml
import sys

class DataValidation :
    def __init__(self, config: DataValidationEntity) -> None:
        self.artifact_path = config.artifact_path
        self.data_path = config.data_path
        self.schema_path = config.schema_path
        
    def get_schema(self) -> dict:
        try:
            with open(self.schema_path, 'r') as file:
                schema = yaml.safe_load(file)

            logger.info("Schema file accessed and loaded")
            return schema
        
        except yaml.YAMLError:
            logger.exception("ERROR: error in schema configuration file")
            sys.exit(1)

    def check(self, schema: dict) -> None:
        try:
            df = pd.read_csv(self.data_path)
            logger.info("Imported csv data to dataframe")

        except Exception as e:
            logger.exception(f"ERROR: the following exception occured while reading data : {e}")

        valid_set = set(schema.keys())
        col_set = set(df.columns)

        os.makedirs(self.artifact_path, exist_ok=True)
        status_path = self.artifact_path / "status.txt"
        
        validation_status = "Invalid"
        if (valid_set == col_set):
            validation_status = "Valid"
            logger.info("Data confirmed to be valid")

        with open(status_path, "w") as file:
            file.write(f"Validation Status : {validation_status}")

        if validation_status == "Invalid":
            logger.error("Data is not valid. Stopping Pipeline...")
            sys.exit(1)
