import boto3
from botocore.exceptions import ClientError
import yaml
from pathlib import Path
import sys
import os
from io import BytesIO
from malwareDetection.entity.entities import ModelPusherEntity
from malwareDetection import logger

class ModelPusher:
    def __init__(self, config: ModelPusherEntity) -> None:
        self.artifact_dir = config.artifact_path
        self.bucket_name = config.bucket_name
        self.classifier_dir = config.classifier_dir
        self.encoder_dir = config.encoder_dir
        self.evaluation_dir = config.evaluation_dir
        self.model_bucket_path = config.model_bucket_path
        self.dt = config.dt
        
        self.s3_client = boto3.client('s3')

    def push_artifact(self) -> None:
        try:
            artifact_folder = "artifact/" / Path(self.dt.strftime(r"%Y-%m-%d_%H-%M-%S"))

            for root, _, files in os.walk(self.artifact_dir):
                for file in files:
                    local_path = Path(root) / file
                    rel_path = os.path.relpath(local_path, self.artifact_dir)
                    object_name = artifact_folder/rel_path

                    self.s3_client.upload_file(local_path, self.bucket_name, str(object_name))
                    logger.info(f"uploaded {local_path} -----> {object_name}")

            self.s3_client.upload_file("config.yaml", self.bucket_name, str(artifact_folder / "config.yaml"))

        except Exception as e:
            logger.exception(f"ERROR: exception encountered while uploading artifact folder to S3 bucket: {e}")
            sys.exit(1)

    def check_for_existing_model(self) -> bool:
        try:
            self.s3_client.head_object(Bucket=self.bucket_name, Key=str(self.model_bucket_path/"evaluation.yaml"))
            logger.info("evaluated model exists with given model bucket path")
            return True

        except ClientError:
            logger.info("evaluated model does not exist in the bucket")
            return False

        except Exception as e:
            logger.exception(f"ERROR: exception encoutered while checking for preexisting model in bucket: {e}")
            sys.exit(1)

    def push_model(self) -> None:
        try:
            self.s3_client.upload_file(self.classifier_dir / "classifier.pkl", self.bucket_name, str(self.model_bucket_path/"model.pkl"))
            self.s3_client.upload_file(self.encoder_dir / "ordinal_encoder.pkl", self.bucket_name, str(self.model_bucket_path/"ordinal_encoder.pkl"))
            self.s3_client.upload_file(self.evaluation_dir / "evaluation.yaml", self.bucket_name, str(self.model_bucket_path/"evaluation.yaml"))
            logger.info("Uploaded model, encoder and evaluation metrics scores to bucket")

        except Exception as e:
            logger.exception(f"ERROR: exception occurred while pushing model to bucket: {e}")
            sys.exit(1)

    def is_curr_model_better(self) -> bool:
        try:      
            model_eval_bytes = BytesIO()
            self.s3_client.download_fileobj(self.bucket_name, str(self.model_bucket_path / "evaluation.yaml"), model_eval_bytes)
            model_eval_bytes.seek(0)
            best_metric = yaml.safe_load(model_eval_bytes)

            with open(self.evaluation_dir / "evaluation.yaml", 'r') as eval_file:
                curr_metric = yaml.safe_load(eval_file)

            better = 0
            for metric in ["accuracy", "f1", "precision", "recall"]:
                better += 1 if best_metric[metric] < curr_metric[metric] else 0

            if better > 2:
                logger.info("local model is better than bucket model")
                return True

            logger.info("bucket model is better than local model")
            return False

        except Exception as e:
            logger.exception(f"ERROR: exception occured while comparing bucket model to local model: {e}")
            sys.exit(1)
