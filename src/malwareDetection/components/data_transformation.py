import sys
from malwareDetection import logger
import numpy as np
from pathlib import Path
from pandas import DataFrame
import pandas as pd
from malwareDetection.entity.entities import DataTransformationEntity
from sklearn.model_selection import train_test_split
import os

class DataTransformation:
    def __init__(self, config: DataTransformationEntity):
        self.artifact_path = config.artifact_path
        self.data_path = config.data_path
        self.train_data_path = config.train_data_path
        self.test_data_path = config.test_data_path

    def create_dataframe(self) -> DataFrame:
        try:
            data_path = Path(self.data_path)
            df = pd.read_csv(data_path)
            logger.info("Created dataframe from csv")
            return df
        except Exception as e:
            logger.exception(f"ERROR: exception generated while creating dataframe from csv. Check csv path: {e}")
            sys.exit(1)

    def make_transformations(self, df: DataFrame) -> DataFrame:
        try:
            df.drop("_id", axis=1,inplace=True)
            for column in df.columns:
                if df[column].dtype == 'float64':
                    df[column] = df[column].fillna(0).astype(np.int64, errors='raise')

            df.dropna(inplace=True)
            logger.info("Made transformations to the dataframe")
            return df
        except Exception as e:
            logger.exception(f"ERROR: exception occured while transforming dataframe: {e}")
            sys.exit(1)

    def create_train_test_data(self, df: DataFrame) -> None :
        try:
            train, test =  train_test_split(df, shuffle=True, test_size=0.3)
            
            os.makedirs(self.train_data_path, exist_ok=True)
            train.to_csv(self.train_data_path / "train.csv", index=False)
            
            os.makedirs(self.test_data_path, exist_ok=True)
            test.to_csv(self.test_data_path / "test.csv", index=False)

            logger.info("Created train and test datasets")

        except Exception as e:
            logger.exception(f"ERROR: exception occured while creating train and test data: {e}")

