from pandas import DataFrame, Series
from sklearn.preprocessing import OrdinalEncoder
from xgboost import XGBClassifier
import os
import pickle
import sys
import pandas as pd
from malwareDetection import logger
from malwareDetection.entity.entities import ModelTrainingEntity

class ModelTraining():
    def __init__(self, config : ModelTrainingEntity) -> None:
        self.artifact_path = config.artifact_path
        self.transformers_path = config.transformers_path
        self.train_data_path = config.train_data_path
        self.n_estimators = config.n_estimators
        self.max_leaves = config.max_leaves
        self.learning_rate = config.learning_rate

    def get_features_and_target(self) -> (DataFrame, Series):
        try:
            df = pd.read_csv(self.train_data_path)
            target = "Label"
            X = df.drop(columns=target)
            y = df[target] 
            logger.info("Split features and target")
            return (X, y)
        except Exception as e:
            logger.exception(f"ERROR: exception occured while splitting features and target: {e}")
            sys.exit(1)

    def train_model(self, X: DataFrame, y: Series) -> None:
        try:
            ordinal_encoder = OrdinalEncoder()
            y = ordinal_encoder.fit_transform(y.to_numpy().reshape(-1, 1))
            logger.info("Created encoder")
            classifier = XGBClassifier(
                        n_estimators = self.n_estimators,
                        max_leaves = self.max_leaves,
                        learning_rate = self.learning_rate
                    )
            classifier.fit(X, y)
            logger.info("Created the model")

            os.makedirs(self.artifact_path, exist_ok=True)
            os.makedirs(self.transformers_path, exist_ok=True)

            with open(self.transformers_path / "ordinal_encoder.pkl", 'wb') as file:
                pickle.dump(ordinal_encoder, file)

            with open(self.artifact_path / "classifier.pkl", 'wb') as file:
                pickle.dump(classifier, file)

            logger.info("Saved pickled model and encoder")

        except Exception as e:
            logger.exception(f"ERROR: exception occured while training model: {e}")
            sys.exit(1)

