from malwareDetection.utils import read_yaml
from malwareDetection.constants import *
from malwareDetection.entity.entities import *
import sys
from malwareDetection import logger
from pathlib import Path
from datetime import datetime, timezone

class ConfigurationBuilder():
    def __init__(
        self,
        config = CONFIG_FILE,
        params = PARAMS_FILE,
        schema = SCHEMA_FILE,
    ):
        self.config = read_yaml(Path(config))
        self.params = read_yaml(Path(params))
        self.schema = read_yaml(Path(schema))

        self.config["datetime"] = datetime.now(timezone.utc)

    def DataIngestionConfigBuilder(self) -> DataIngestionEntity:
        try:
            config = self.config['DataIngestionConfig']
            entity = DataIngestionEntity(
                        artifact_path = Path(config["artifact_path"]),
                        database_name = config["database_name"],
                        collection_name = config["collection_name"]
                    )

        except:
            logger.info("ERROR: Data Ingestion entity config not set correctly")
            sys.exit(1)

        return entity
    
    def DataValidationConfigBuilder(self) -> DataValidationEntity:
        try:
            config = self.config['DataValidationConfig']
            entity = DataValidationEntity(
                artifact_path = Path(config["artifact_path"]),
                data_path = Path(config["data_path"]),
                schema_path = Path(config["schema_path"])
            )

        except:
            logger.info("ERROR: Data Validation entity config not set correctly")
            sys.exit(1)

        return entity

    def DataTransformationConfigBuilder(self) -> DataTransformationEntity :
        try:
            config = self.config["DataTransformationConfig"]
            entity = DataTransformationEntity(
                artifact_path = Path(config["artifact_path"]),
                data_path = Path(config["data_path"]),
                train_data_path = Path(config["train_data_path"]),
                test_data_path = Path(config["test_data_path"])
            )
            return entity

        except:
            logger.exception("ERROR: Data Transformation entity config not set correctly")
            sys.exit(1)

    def ModelTrainingConfigBuilder(self) -> ModelTrainingEntity :
        try:
            config = self.config["ModelTrainingConfig"]
            params = self.params
            entity = ModelTrainingEntity(
                artifact_path = Path(config["artifact_path"]),
                transformers_path = Path(config["transformers_path"]),
                train_data_path = Path(config["train_data_path"]),
                n_estimators = params["n_estimators"],
                max_leaves = params["max_leaves"],
                learning_rate = params["learning_rate"]
            )
            return entity

        except:
            logger.exception("ERROR: Model Training entity config not set correctly")
            sys.exit(1)
      
    def ModelEvaluationConfigBuilder(self) -> ModelEvaluationEntity :
        try:
            config = self.config["ModelEvaluationConfig"]
            entity = ModelEvaluationEntity(
                    artifact_path = config["artifact_path"],
                    test_data_path = config["test_data_path"],
                    classifier_dir = config["classifier_dir"],
                    encoder_dir = config["encoder_dir"]
                )
            return entity

        except:
            logger.exception("ERROR: Model Evaluation entity config not set correctly")
            sys.exit(1)

    def ModelPusherConfigBuilder(self) -> ModelPusherEntity :
        try:
            config = self.config["ModelPusherConfig"]
            entity = ModelPusherEntity(
                    artifact_path = Path(self.config["artifact_dir"]),
                    bucket_name = config["bucket_name"],
                    classifier_dir = Path(config["classifier_dir"]),
                    evaluation_dir = Path(config["evaluation_dir"]),
                    encoder_dir = Path(config["encoder_dir"]),
                    dt = self.config["datetime"],
                    model_bucket_path = Path(config["model_bucket_path"])
                )
            return entity

        except:
            logger.exception("ERROR: Model Pusher entity config not set properly")
            sys.exit(1)

